`timescale 1 ns / 1 ps

module TorqCalc_IP_v1_0_S00_AXIS #
(
    parameter integer C_S_AXIS_TDATA_WIDTH = 32,
    parameter integer FIFO_DEPTH = 16
)
(
    input wire  S_AXIS_ACLK,
    input wire  S_AXIS_ARESETN,
    output wire S_AXIS_TREADY,
    input wire [C_S_AXIS_TDATA_WIDTH-1 : 0] S_AXIS_TDATA,
    input wire [(C_S_AXIS_TDATA_WIDTH/8)-1 : 0] S_AXIS_TSTRB,
    input wire  S_AXIS_TLAST,
    input wire  S_AXIS_TVALID,

    output wire [17:0] dsp_a,
    output wire [17:0] dsp_b,
    output wire [47:0] dsp_p_out
);

localparam ADDR_WIDTH = $clog2(FIFO_DEPTH);

// FIFO storage
reg [C_S_AXIS_TDATA_WIDTH-1:0] fifo [0:FIFO_DEPTH-1];
reg [ADDR_WIDTH-1:0] write_ptr = 0;
reg [ADDR_WIDTH-1:0] read_ptr = 0;

wire fifo_full = ((write_ptr + 1) == read_ptr) || ((write_ptr == FIFO_DEPTH-1) && (read_ptr == 0));
wire fifo_empty = (write_ptr == read_ptr);

// AXI Stream ready when FIFO not full
assign S_AXIS_TREADY = ~fifo_full;

// Write data into FIFO
always @(posedge S_AXIS_ACLK) begin
    if (~S_AXIS_ARESETN) begin
        write_ptr <= 0;
    end else if (S_AXIS_TVALID && S_AXIS_TREADY) begin
        fifo[write_ptr] <= S_AXIS_TDATA;
        write_ptr <= (write_ptr == FIFO_DEPTH-1) ? 0 : write_ptr + 1;
    end
end

// Read data from FIFO
reg [C_S_AXIS_TDATA_WIDTH-1:0] fifo_data;
always @(posedge S_AXIS_ACLK) begin
    if (~S_AXIS_ARESETN) begin
        read_ptr <= 0;
        fifo_data <= 0;
    end else if (~fifo_empty) begin
        fifo_data <= fifo[read_ptr];
        read_ptr <= (read_ptr == FIFO_DEPTH-1) ? 0 : read_ptr + 1;
    end
end

// Split input data for DSP48 inputs
wire [17:0] dsp_a_wire = fifo_data[17:0];
wire [17:0] dsp_b_wire = fifo_data[35:18];  // Adjust if data width > 36 bits; else use fifo_data[31:14]

// DSP48 multiplier output register
reg [47:0] dsp_p_reg;

// DSP48E1 primitive instantiation
DSP48E1 #(
    .AUTORESET_PATDET("FALSE"),
    .MASK(48'h3FFFFFFFFFFF),
    .PATTERN(48'h000000000000),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("FALSE"),
    .USE_SIMD("ONE48")
) dsp48_inst (
    .CLK(S_AXIS_ACLK),
    .A({{2{dsp_a_wire[17]}}, dsp_a_wire}),  // Sign-extend to 25 bits
    .B({{2{dsp_b_wire[17]}}, dsp_b_wire}),  // Sign-extend to 18 bits
    .C(48'd0),
    .P(dsp_p_reg),

    // Control signals tied to default values
    .CEA1(1'b1), .CEA2(1'b1), .CEB1(1'b1), .CEB2(1'b1),
    .CEC(1'b1), .CECARRYIN(1'b1), .CECTRL(1'b1), .CEM(1'b1),
    .CEP(1'b1), .RSTA(1'b0), .RSTB(1'b0), .RSTC(1'b0),
    .RSTCTRL(1'b0), .RSTM(1'b0), .RSTP(1'b0),
    .ACIN(30'd0), .BCIN(18'd0), .CARRYCASCIN(1'b0),
    .MULTSIGNIN(1'b0), .OPMODE(7'b0110101), .CARRYIN(1'b0),
    .CARRYINSEL(3'b000),
    .PATTERNBDETECT(), .PATTERNDETECT(),
    .OVERFLOW(), .UNDERFLOW(), .PATTERNBDETECTOUT(),
    .PATTERNDETECTOUT(), .CARRYOUT(), .CARRYCASCOUT(),
    .MULTSIGNOUT()
);

assign dsp_a = dsp_a_wire;
assign dsp_b = dsp_b_wire;
assign dsp_p_out = dsp_p_reg;

endmodule
